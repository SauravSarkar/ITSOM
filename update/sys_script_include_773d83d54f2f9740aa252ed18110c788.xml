<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_224218_itsom.MetricInstance</api_name>
        <client_callable>false</client_callable>
        <description>Metrics  insert and update metric_instance rows&#13;
var mi = new MetricInstance(definition, current);&#13;
mi.process();&#13;
</description>
        <name>MetricInstance</name>
        <script><![CDATA[gs.include("PrototypeServer");

var MetricInstance = Class.create();

MetricInstance.prototype = {
    initialize: function(definitionGR, currentGR) {
        this.definition = definitionGR;
        this.current = currentGR;
    },

    // process is the driver for field value duration type definitions 
    process: function() {
        answer = true; 
        mi = this; // global variable
        /*eval(this.definition.script);
        if (!answer) 
           return; */

        this.endDuration();  // end any previous duration for this metric
        this.startDuration(); // start a new one    
    },

    startDuration: function() {
        var gr = this.getNewRecord();
        gr.field_value = this.current[this.definition.field];
        gr.start = (new GlideDateTime()).getDisplayValueInternal();
        gr.insert();
    },

    endDuration: function() {
        var gr = new GlideRecord('metric_instance');
        gr.addQuery('definition', this.definition.sys_id);
        gr.addQuery('id', this.current.sys_id);
        gr.addQuery('calculation_complete', false);
        gr.query();
        if (!gr.next())
          return;
          
        gr.end = (new GlideDateTime()).getDisplayValueInternal();
        gr.duration = GlideDateTime.subtract(new GlideDateTime(gr.start), new GlideDateTime(gr.end));
        gr.calculation_complete = true;
        gr.update();
    },

    getNewRecord: function() {
        var gr = new GlideRecord('metric_instance');
        gr.table = this.current.getRecordClassName();
        gr.id = this.current.sys_id;
        gr.definition = this.definition.sys_id;
        gr.field = this.definition.field;
        return gr;
    },

    // return true if a metric exists for this definition and current
    metricExists: function() {
        var gr = new GlideRecord('metric_instance');
        gr.addQuery("id", this.current.sys_id);
        gr.addQuery("definition", this.definition.sys_id);
        gr.query();
        return gr.hasNext();
    },

    _z : function() {
    }    
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>saurav.sarkar</sys_created_by>
        <sys_created_on>2018-07-26 10:13:55</sys_created_on>
        <sys_id>773d83d54f2f9740aa252ed18110c788</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>MetricInstance</sys_name>
        <sys_package display_value="IT services operation management" source="x_224218_itsom">6fd1341c4f4e9300aa252ed18110c744</sys_package>
        <sys_policy/>
        <sys_scope display_value="IT services operation management">6fd1341c4f4e9300aa252ed18110c744</sys_scope>
        <sys_update_name>sys_script_include_773d83d54f2f9740aa252ed18110c788</sys_update_name>
        <sys_updated_by>saurav.sarkar</sys_updated_by>
        <sys_updated_on>2018-07-26 16:00:22</sys_updated_on>
    </sys_script_include>
</record_update>
